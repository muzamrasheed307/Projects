<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<testng-results failed="5" passed="220" skipped="0" total="225">
<suite duration-ms="205836" name="io.cucumber.core.plugin.TestNGFormatter">
<test duration-ms="205836" name="io.cucumber.core.plugin.TestNGFormatter">
<class name="Regression_TestAdmin">
<test-method duration-ms="4836" finished-at="2023-02-28T05:06:36.501Z" name="Retrieve a list of account types" started-at="2023-02-28T05:06:31.631Z" status="FAIL">
<exception class="java.lang.NullPointerException">
<message><![CDATA[Given Environment access token is generated for account types...............passed
When request is sent to retrieve a list of account types....................passed
Then response contains the list of account types............................failed
And AT response body is not null,status code is 200.........................skipped
And AT response does not contain any error..................................skipped
And AT external references of all account types must be unique if not null..skipped
And all names are unique for account type...................................skipped
]]></message>
<full-stacktrace><![CDATA[java.lang.NullPointerException: Inflater has been closed
	at java.util.zip.Inflater.ensureOpen(Inflater.java:389)
	at java.util.zip.Inflater.inflate(Inflater.java:257)
	at java.util.zip.InflaterInputStream.read(InflaterInputStream.java:152)
	at java.util.zip.GZIPInputStream.read(GZIPInputStream.java:117)
	at org.apache.http.conn.EofSensorInputStream.read(EofSensorInputStream.java:135)
	at org.apache.http.conn.EofSensorInputStream$read.call(Unknown Source)
	at io.restassured.internal.RestAssuredResponseOptionsGroovyImpl.convertStreamToByteArray(RestAssuredResponseOptionsGroovyImpl.groovy:466)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:98)
	at org.codehaus.groovy.runtime.callsite.StaticMetaMethodSite$StaticMetaMethodSiteNoUnwrapNoCoerce.invoke(StaticMetaMethodSite.java:151)
	at org.codehaus.groovy.runtime.callsite.StaticMetaMethodSite.callStatic(StaticMetaMethodSite.java:102)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callStatic(AbstractCallSite.java:209)
	at io.restassured.internal.RestAssuredResponseOptionsGroovyImpl.charsetToString(RestAssuredResponseOptionsGroovyImpl.groovy:518)
	at io.restassured.internal.RestAssuredResponseOptionsGroovyImpl$charsetToString$16.callCurrent(Unknown Source)
	at io.restassured.internal.RestAssuredResponseOptionsGroovyImpl.asString(RestAssuredResponseOptionsGroovyImpl.groovy:179)
	at io.restassured.internal.RestAssuredResponseOptionsGroovyImpl.asString(RestAssuredResponseOptionsGroovyImpl.groovy:175)
	at io.restassured.internal.RestAssuredResponseOptionsImpl.asString(RestAssuredResponseOptionsImpl.java:223)
	at io.restassured.response.ResponseBodyData$asString.call(Unknown Source)
	at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:47)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:116)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:120)
	at io.restassured.internal.support.Prettifier.getPrettifiedBodyIfPossible(Prettifier.groovy:43)
	at io.restassured.internal.support.Prettifier$getPrettifiedBodyIfPossible.call(Unknown Source)
	at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:47)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:116)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:136)
	at io.restassured.internal.RestAssuredResponseOptionsGroovyImpl.prettyPrint(RestAssuredResponseOptionsGroovyImpl.groovy:160)
	at io.restassured.internal.RestAssuredResponseOptionsImpl.prettyPrint(RestAssuredResponseOptionsImpl.java:247)
	at stepDefinition.Admin.AccountTypes_StepDefs.response_contains_the_list_of_account_types(AccountTypes_StepDefs.java:67)
	at ✽.response contains the list of account types(file:///C:/Users/mrasheed/IdeaProjects/test/Feature_Regression/Regression_TestAdmin.feature:9)
]]></full-stacktrace>
</exception>
</test-method>
<test-method duration-ms="617" finished-at="2023-02-28T05:06:37.560Z" name="Retrieve an account types" started-at="2023-02-28T05:06:36.927Z" status="PASS"/>
<test-method duration-ms="391" finished-at="2023-02-28T05:06:38.063Z" name="2951_Retrieve a list of BusinessUnit" started-at="2023-02-28T05:06:37.657Z" status="PASS"/>
<test-method duration-ms="3026" finished-at="2023-02-28T05:06:41.154Z" name="2951_Retrieve a BusinessUnit" started-at="2023-02-28T05:06:38.115Z" status="PASS"/>
<test-method duration-ms="547" finished-at="2023-02-28T05:06:41.775Z" name="get a list of clubs" started-at="2023-02-28T05:06:41.218Z" status="PASS"/>
<test-method duration-ms="509" finished-at="2023-02-28T05:06:42.396Z" name="Create a club with a Unique name and external reference, if the name and external reference are not unique then the clubs cannot be created" started-at="2023-02-28T05:06:41.876Z" status="PASS"/>
<test-method duration-ms="791" finished-at="2023-02-28T05:06:43.310Z" name="Create a club if externalReference is null with a unique name, delete a club after logging an ID of a club" started-at="2023-02-28T05:06:42.510Z" status="PASS"/>
<test-method duration-ms="286" finished-at="2023-02-28T05:06:43.686Z" name="Create a club if externalReference is unique with name = null" started-at="2023-02-28T05:06:43.388Z" status="PASS"/>
<test-method duration-ms="337" finished-at="2023-02-28T05:06:44.075Z" name="get a newly created club" started-at="2023-02-28T05:06:43.736Z" status="FAIL">
<exception class="java.lang.AssertionError">
<message><![CDATA[Given Environment access token is generated for account types...............passed
When a request is sent to retrieve a newly created club.....................passed
Then the response will contain club_RestApi, CRA, 200 and false if it exists.failed
And log values of all components of a club..................................skipped
]]></message>
<full-stacktrace><![CDATA[java.lang.AssertionError: expected [club_RestApi] but found [null]
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.failNotEquals(Assert.java:1037)
	at org.testng.Assert.assertEqualsImpl(Assert.java:140)
	at org.testng.Assert.assertEquals(Assert.java:122)
	at org.testng.Assert.assertEquals(Assert.java:629)
	at org.testng.Assert.assertEquals(Assert.java:639)
	at stepDefinition.Admin.Clubs_StepDefs.the_response_will_contain_and_if_it_exists(Clubs_StepDefs.java:4900)
	at ✽.the response will contain club_RestApi, CRA, 200 and false if it exists(file:///C:/Users/mrasheed/IdeaProjects/test/Feature_Regression/Regression_TestAdmin.feature:69)
]]></full-stacktrace>
</exception>
</test-method>
<test-method duration-ms="277" finished-at="2023-02-28T05:06:44.429Z" name="update a club" started-at="2023-02-28T05:06:44.147Z" status="FAIL">
<exception class="java.lang.AssertionError">
<message><![CDATA[Given Environment access token is generated for account types...............passed
When a request is sent to update a club with club_RestApi2002 and CRA.......passed
Then a new club will be updated with 200 and false if it exists.............failed
]]></message>
<full-stacktrace><![CDATA[java.lang.AssertionError: expected [false] but found [true]
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.failNotEquals(Assert.java:1037)
	at org.testng.Assert.assertEqualsImpl(Assert.java:140)
	at org.testng.Assert.assertEquals(Assert.java:122)
	at org.testng.Assert.assertEquals(Assert.java:819)
	at org.testng.Assert.assertEquals(Assert.java:829)
	at stepDefinition.Admin.Clubs_StepDefs.a_new_club_will_be_updated_with_and_if_it_exists(Clubs_StepDefs.java:4951)
	at ✽.a new club will be updated with 200 and false if it exists(file:///C:/Users/mrasheed/IdeaProjects/test/Feature_Regression/Regression_TestAdmin.feature:77)
]]></full-stacktrace>
</exception>
</test-method>
<test-method duration-ms="237" finished-at="2023-02-28T05:06:44.715Z" name="Update a club if name and externalReference are Null, externalReference can be null but name cannot be null" started-at="2023-02-28T05:06:44.475Z" status="FAIL">
<exception class="java.lang.AssertionError">
<message><![CDATA[Given Environment access token is generated for account types...............passed
When a request  is sent to update a club with name = null and externalReference = null.passed
Then a new club will not be updated, statusCode is 400 and response contains error.failed
]]></message>
<full-stacktrace><![CDATA[java.lang.AssertionError: expected [400] but found [401]
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.failNotEquals(Assert.java:1037)
	at org.testng.Assert.assertEqualsImpl(Assert.java:140)
	at org.testng.Assert.assertEquals(Assert.java:122)
	at org.testng.Assert.assertEquals(Assert.java:907)
	at org.testng.Assert.assertEquals(Assert.java:917)
	at stepDefinition.Admin.Clubs_StepDefs.a_new_club_will_not_be_updated_statuscode_is_400_and_response_contains_error(Clubs_StepDefs.java:4983)
	at ✽.a new club will not be updated, statusCode is 400 and response contains error(file:///C:/Users/mrasheed/IdeaProjects/test/Feature_Regression/Regression_TestAdmin.feature:84)
]]></full-stacktrace>
</exception>
</test-method>
<test-method duration-ms="459" finished-at="2023-02-28T05:06:45.231Z" name="delete a newly created club" started-at="2023-02-28T05:06:44.764Z" status="FAIL">
<exception class="java.lang.NullPointerException">
<message><![CDATA[Given Environment access token is generated for account types...............passed
When a request is sent to delete a club.....................................passed
Then the club must be deleted and the response must contain 200 status code.passed
And verify if the club has been deleted.....................................failed
]]></message>
<full-stacktrace><![CDATA[java.lang.NullPointerException
	at stepDefinition.Admin.Clubs_StepDefs.verify_if_the_club_has_been_deleted(Clubs_StepDefs.java:5016)
	at ✽.verify if the club has been deleted(file:///C:/Users/mrasheed/IdeaProjects/test/Feature_Regression/Regression_TestAdmin.feature:89)
]]></full-stacktrace>
</exception>
</test-method>
<test-method duration-ms="1164" finished-at="2023-02-28T05:06:46.436Z" name="2630_Retrieve a list of countries" started-at="2023-02-28T05:06:45.270Z" status="PASS"/>
<test-method duration-ms="337" finished-at="2023-02-28T05:06:46.820Z" name="2630_Create a country" started-at="2023-02-28T05:06:46.478Z" status="PASS"/>
<test-method duration-ms="302" finished-at="2023-02-28T05:06:47.178Z" name="2630_Retrieve a country" started-at="2023-02-28T05:06:46.866Z" status="PASS"/>
<test-method duration-ms="882" finished-at="2023-02-28T05:06:48.125Z" name="2630_Update a country" started-at="2023-02-28T05:06:47.238Z" status="PASS"/>
<test-method duration-ms="4932" finished-at="2023-02-28T05:06:53.100Z" name="2630_Delete a country" started-at="2023-02-28T05:06:48.166Z" status="PASS"/>
<test-method duration-ms="441" finished-at="2023-02-28T05:06:53.578Z" name="Retrieve a list of interaction types" started-at="2023-02-28T05:06:53.136Z" status="PASS"/>
<test-method duration-ms="712" finished-at="2023-02-28T05:06:54.332Z" name="Retrieve a interaction type" started-at="2023-02-28T05:06:53.618Z" status="PASS"/>
<test-method duration-ms="332" finished-at="2023-02-28T05:06:54.718Z" name="Retrieve a list of location descriptors" started-at="2023-02-28T05:06:54.382Z" status="PASS"/>
<test-method duration-ms="454" finished-at="2023-02-28T05:06:55.219Z" name="2951_Retrieve a list of locations" started-at="2023-02-28T05:06:54.764Z" status="PASS"/>
<test-method duration-ms="756" finished-at="2023-02-28T05:06:56.049Z" name="2951_Create a location." started-at="2023-02-28T05:06:55.286Z" status="PASS"/>
<test-method duration-ms="372" finished-at="2023-02-28T05:06:56.465Z" name="2951_Retrieve a location" started-at="2023-02-28T05:06:56.091Z" status="PASS"/>
<test-method duration-ms="767" finished-at="2023-02-28T05:06:57.264Z" name="2951_Update a location with unique name, external reference and email." started-at="2023-02-28T05:06:56.496Z" status="PASS"/>
<test-method duration-ms="26475" finished-at="2023-02-28T05:07:23.768Z" name="2951_Delete a location" started-at="2023-02-28T05:06:57.291Z" status="PASS"/>
<test-method duration-ms="243" finished-at="2023-02-28T05:07:24.043Z" name="Retrieve a list of member descriptors" started-at="2023-02-28T05:07:23.799Z" status="PASS"/>
<test-method duration-ms="230" finished-at="2023-02-28T05:07:24.320Z" name="Retrieve a list of mobile carriers" started-at="2023-02-28T05:07:24.086Z" status="PASS"/>
<test-method duration-ms="281" finished-at="2023-02-28T05:07:24.632Z" name="Retrieve a mobile carrier" started-at="2023-02-28T05:07:24.348Z" status="PASS"/>
<test-method duration-ms="296" finished-at="2023-02-28T05:07:24.974Z" name="Retrieve a list of prefix types" started-at="2023-02-28T05:07:24.674Z" status="PASS"/>
<test-method duration-ms="246" finished-at="2023-02-28T05:07:25.256Z" name="Retrieve a prefix type" started-at="2023-02-28T05:07:25.010Z" status="PASS"/>
<test-method duration-ms="52665" finished-at="2023-02-28T05:08:17.960Z" name="Collecting all regions id, name, abbreviation of each country, if region exist" started-at="2023-02-28T05:07:25.293Z" status="PASS"/>
<test-method duration-ms="298" finished-at="2023-02-28T05:08:18.290Z" name="create a region with Unique name and abbreviation. if name and abbreviation is not unique, region must not be created" started-at="2023-02-28T05:08:17.989Z" status="PASS"/>
<test-method duration-ms="224" finished-at="2023-02-28T05:08:18.556Z" name="collect the newly created region" started-at="2023-02-28T05:08:18.329Z" status="PASS"/>
<test-method duration-ms="227" finished-at="2023-02-28T05:08:18.814Z" name="update any or all fields of a region except id of the region (QC and Quebec already exist)" started-at="2023-02-28T05:08:18.584Z" status="PASS"/>
<test-method duration-ms="4581" finished-at="2023-02-28T05:08:23.427Z" name="delete a region" started-at="2023-02-28T05:08:18.842Z" status="PASS"/>
<test-method duration-ms="223" finished-at="2023-02-28T05:08:23.688Z" name="Retrieve a list of reward categories" started-at="2023-02-28T05:08:23.464Z" status="PASS"/>
<test-method duration-ms="400" finished-at="2023-02-28T05:08:24.118Z" name="Retrieve a reward category" started-at="2023-02-28T05:08:23.717Z" status="PASS"/>
<test-method duration-ms="220" finished-at="2023-02-28T05:08:24.370Z" name="Retrieve a list of reward descriptors" started-at="2023-02-28T05:08:24.145Z" status="PASS"/>
<test-method duration-ms="247" finished-at="2023-02-28T05:08:24.652Z" name="Retrieve a reward descriptor" started-at="2023-02-28T05:08:24.402Z" status="PASS"/>
<test-method duration-ms="213" finished-at="2023-02-28T05:08:24.897Z" name="Retrieve a list of transaction type descriptors" started-at="2023-02-28T05:08:24.683Z" status="PASS"/>
<test-method duration-ms="215" finished-at="2023-02-28T05:08:25.151Z" name="Retrieve a transaction type descriptor" started-at="2023-02-28T05:08:24.927Z" status="PASS"/>
<test-method duration-ms="255" finished-at="2023-02-28T05:08:25.433Z" name="Retrieve a list of transaction type" started-at="2023-02-28T05:08:25.178Z" status="PASS"/>
<test-method duration-ms="293" finished-at="2023-02-28T05:08:25.758Z" name="Retrieve a transaction type" started-at="2023-02-28T05:08:25.462Z" status="PASS"/>
</class>
<class name="Regression_TestOffers">
<test-method duration-ms="383" finished-at="2023-02-28T05:08:26.172Z" name="get a list of rewards" started-at="2023-02-28T05:08:25.788Z" status="PASS"/>
<test-method duration-ms="234" finished-at="2023-02-28T05:08:26.437Z" name="get a list of rewards_2" started-at="2023-02-28T05:08:26.201Z" status="PASS"/>
<test-method duration-ms="1070" finished-at="2023-02-28T05:08:27.554Z" name="Create a Choice reward" started-at="2023-02-28T05:08:26.481Z" status="PASS"/>
<test-method duration-ms="401" finished-at="2023-02-28T05:08:27.993Z" name="get a newly created Choice reward" started-at="2023-02-28T05:08:27.591Z" status="PASS"/>
<test-method duration-ms="654" finished-at="2023-02-28T05:08:28.688Z" name="update a Choice reward" started-at="2023-02-28T05:08:28.033Z" status="PASS"/>
<test-method duration-ms="576" finished-at="2023-02-28T05:08:29.316Z" name="delete a newly created choice reward" started-at="2023-02-28T05:08:28.740Z" status="PASS"/>
<test-method duration-ms="330" finished-at="2023-02-28T05:08:29.695Z" name="delete a choice reward that is issued and executed" started-at="2023-02-28T05:08:29.363Z" status="PASS"/>
<test-method duration-ms="229" finished-at="2023-02-28T05:08:29.961Z" name="get a list of forced rewards" started-at="2023-02-28T05:08:29.731Z" status="PASS"/>
<test-method duration-ms="1074" finished-at="2023-02-28T05:08:31.074Z" name="Create a forced reward" started-at="2023-02-28T05:08:29.997Z" status="PASS"/>
<test-method duration-ms="358" finished-at="2023-02-28T05:08:31.483Z" name="get a newly created forced reward" started-at="2023-02-28T05:08:31.124Z" status="PASS"/>
<test-method duration-ms="642" finished-at="2023-02-28T05:08:32.254Z" name="update a forced reward" started-at="2023-02-28T05:08:31.609Z" status="PASS"/>
<test-method duration-ms="287" finished-at="2023-02-28T05:08:32.575Z" name="delete a newly created forced reward" started-at="2023-02-28T05:08:32.286Z" status="PASS"/>
<test-method duration-ms="285" finished-at="2023-02-28T05:08:32.897Z" name="delete a forced reward that is issued and executed" started-at="2023-02-28T05:08:32.611Z" status="PASS"/>
<test-method duration-ms="321" finished-at="2023-02-28T05:08:33.253Z" name="get a list of Gift Card rewards" started-at="2023-02-28T05:08:32.930Z" status="PASS"/>
<test-method duration-ms="363" finished-at="2023-02-28T05:08:33.664Z" name="get a list of internal rewards" started-at="2023-02-28T05:08:33.298Z" status="PASS"/>
<test-method duration-ms="603" finished-at="2023-02-28T05:08:34.297Z" name="Create a internal reward" started-at="2023-02-28T05:08:33.692Z" status="PASS"/>
<test-method duration-ms="284" finished-at="2023-02-28T05:08:34.616Z" name="get a newly created internal reward" started-at="2023-02-28T05:08:34.329Z" status="PASS"/>
<test-method duration-ms="577" finished-at="2023-02-28T05:08:35.229Z" name="update a internal reward" started-at="2023-02-28T05:08:34.648Z" status="PASS"/>
<test-method duration-ms="329" finished-at="2023-02-28T05:08:35.597Z" name="delete a newly created internal reward" started-at="2023-02-28T05:08:35.264Z" status="PASS"/>
<test-method duration-ms="236" finished-at="2023-02-28T05:08:35.878Z" name="delete a internal reward that is issued and executed" started-at="2023-02-28T05:08:35.640Z" status="PASS"/>
<test-method duration-ms="218" finished-at="2023-02-28T05:08:36.130Z" name="get a list of recurring rewards" started-at="2023-02-28T05:08:35.911Z" status="PASS"/>
<test-method duration-ms="703" finished-at="2023-02-28T05:08:36.865Z" name="Create a recurring reward" started-at="2023-02-28T05:08:36.162Z" status="PASS"/>
<test-method duration-ms="310" finished-at="2023-02-28T05:08:37.208Z" name="get a newly created recurring reward" started-at="2023-02-28T05:08:36.898Z" status="PASS"/>
<test-method duration-ms="701" finished-at="2023-02-28T05:08:37.947Z" name="update a recurring reward" started-at="2023-02-28T05:08:37.245Z" status="PASS"/>
<test-method duration-ms="391" finished-at="2023-02-28T05:08:38.395Z" name="delete a newly created recurring reward" started-at="2023-02-28T05:08:38.002Z" status="PASS"/>
<test-method duration-ms="287" finished-at="2023-02-28T05:08:38.726Z" name="delete a recurring reward that is issued and executed" started-at="2023-02-28T05:08:38.436Z" status="PASS"/>
<test-method duration-ms="221" finished-at="2023-02-28T05:08:38.982Z" name="get a list of variable rewards" started-at="2023-02-28T05:08:38.759Z" status="PASS"/>
<test-method duration-ms="751" finished-at="2023-02-28T05:08:39.784Z" name="Create a Variable reward" started-at="2023-02-28T05:08:39.031Z" status="PASS"/>
<test-method duration-ms="316" finished-at="2023-02-28T05:08:40.137Z" name="get a newly created Variable reward" started-at="2023-02-28T05:08:39.819Z" status="PASS"/>
<test-method duration-ms="642" finished-at="2023-02-28T05:08:40.814Z" name="updating a Variable reward" started-at="2023-02-28T05:08:40.170Z" status="PASS"/>
<test-method duration-ms="296" finished-at="2023-02-28T05:08:41.148Z" name="delete a newly created Variable reward" started-at="2023-02-28T05:08:40.851Z" status="PASS"/>
<test-method duration-ms="268" finished-at="2023-02-28T05:08:41.477Z" name="delete a Variable reward that is issued and executed" started-at="2023-02-28T05:08:41.204Z" status="PASS"/>
</class>
<class name="Regression_TestPromotion">
<test-method duration-ms="828" finished-at="2023-02-28T05:08:42.341Z" name="3622_batchRewardPromotion - get an existing BRP with proper permissions and statistics QueryParameter," started-at="2023-02-28T05:08:41.511Z" status="PASS"/>
<test-method duration-ms="604" finished-at="2023-02-28T05:08:42.981Z" name="3622_batchRewardPromotion, creating a new batch reward promotion.If pointsOption=deductAllAvailablePoints," started-at="2023-02-28T05:08:42.374Z" status="PASS"/>
<test-method duration-ms="340" finished-at="2023-02-28T05:08:43.360Z" name="3622_batchRewardPromotion - updating a batch reward promotion. BRP will not be updated if any or all given values is/are invalid." started-at="2023-02-28T05:08:43.018Z" status="PASS"/>
<test-method duration-ms="451" finished-at="2023-02-28T05:08:43.842Z" name="3622_batchRewardPromotion - Execute a batch reward promotion" started-at="2023-02-28T05:08:43.390Z" status="PASS"/>
<test-method duration-ms="396" finished-at="2023-02-28T05:08:44.280Z" name="3622_batchRewardPromotion - Execution history of a batch reward promotion" started-at="2023-02-28T05:08:43.882Z" status="PASS"/>
<test-method duration-ms="331" finished-at="2023-02-28T05:08:44.642Z" name="3622_batchRewardPromotion - delete an existing BRP and verify deletion succeeds when BRP is not executed and issued in any promotional rule" started-at="2023-02-28T05:08:44.311Z" status="PASS"/>
<test-method duration-ms="238" finished-at="2023-02-28T05:08:44.919Z" name="3622_batchRewardPromotion - delete an existing BRP and verify deletion fails when BRP is executed and issued in promotional rule" started-at="2023-02-28T05:08:44.676Z" status="PASS"/>
<test-method duration-ms="604" finished-at="2023-02-28T05:08:45.557Z" name="get a FixedPointPromotion (FPP)" started-at="2023-02-28T05:08:44.953Z" status="PASS"/>
<test-method duration-ms="1597" finished-at="2023-02-28T05:08:47.196Z" name="Create a FixedPointPromotion (FPP)" started-at="2023-02-28T05:08:45.597Z" status="PASS"/>
<test-method duration-ms="186" finished-at="2023-02-28T05:08:47.414Z" name="Create a FixedPointPromotion (FPP) if name and fixedPoints are Null" started-at="2023-02-28T05:08:47.225Z" status="PASS"/>
<test-method duration-ms="254" finished-at="2023-02-28T05:08:47.699Z" name="get a newly created FixedPointPromotion (FPP)" started-at="2023-02-28T05:08:47.445Z" status="PASS"/>
<test-method duration-ms="400" finished-at="2023-02-28T05:08:48.130Z" name="updating a FixedPointPromotion (FPP) and, and limit cannot be oncePerPromotion when updating a Promotion because oncePerPromotion is only valid when creating a promotion." started-at="2023-02-28T05:08:47.729Z" status="PASS"/>
<test-method duration-ms="177" finished-at="2023-02-28T05:08:48.352Z" name="Update a FPP if name and fixedPoints are Null" started-at="2023-02-28T05:08:48.175Z" status="PASS"/>
<test-method duration-ms="319" finished-at="2023-02-28T05:08:48.708Z" name="Execute the FixedPointPromotion (FPP) and log all components" started-at="2023-02-28T05:08:48.385Z" status="PASS"/>
<test-method duration-ms="441" finished-at="2023-02-28T05:08:49.193Z" name="Retrieve all excution data from a fixed point execution" started-at="2023-02-28T05:08:48.750Z" status="PASS"/>
<test-method duration-ms="431" finished-at="2023-02-28T05:08:49.656Z" name="delete a newly created FixedPointPromotion (FPP)" started-at="2023-02-28T05:08:49.223Z" status="PASS"/>
<test-method duration-ms="269" finished-at="2023-02-28T05:08:49.955Z" name="get a recurringInteractionBonus_reward" started-at="2023-02-28T05:08:49.684Z" status="PASS"/>
<test-method duration-ms="793" finished-at="2023-02-28T05:08:50.817Z" name="Create a recurringInteractionBonus_reward" started-at="2023-02-28T05:08:50.024Z" status="PASS"/>
<test-method duration-ms="172" finished-at="2023-02-28T05:08:51.023Z" name="Create a recurringInteractionBonus_reward if name and externalReference are Null" started-at="2023-02-28T05:08:50.846Z" status="PASS"/>
<test-method duration-ms="182" finished-at="2023-02-28T05:08:51.232Z" name="Create a recurringInteractionBonus_reward if interval is null" started-at="2023-02-28T05:08:51.050Z" status="PASS"/>
<test-method duration-ms="231" finished-at="2023-02-28T05:08:51.498Z" name="get a newly created recurringInteractionBonus_reward" started-at="2023-02-28T05:08:51.267Z" status="PASS"/>
<test-method duration-ms="425" finished-at="2023-02-28T05:08:51.982Z" name="updating a recurringInteractionBonus_rewardand, and limit cannot be oncePerPromotion when updating a Promotion because oncePerPromotion is only valid when creating a promotion." started-at="2023-02-28T05:08:51.557Z" status="PASS"/>
<test-method duration-ms="214" finished-at="2023-02-28T05:08:52.225Z" name="Update a recurringInteractionBonus_reward if name and externalReference are Null" started-at="2023-02-28T05:08:52.010Z" status="PASS"/>
<test-method duration-ms="216" finished-at="2023-02-28T05:08:52.474Z" name="Updated a recurringInteractionBonus_reward if interval is null" started-at="2023-02-28T05:08:52.258Z" status="PASS"/>
<test-method duration-ms="400" finished-at="2023-02-28T05:08:52.903Z" name="delete a newly created recurringInteractionBonus_reward" started-at="2023-02-28T05:08:52.502Z" status="PASS"/>
<test-method duration-ms="183" finished-at="2023-02-28T05:08:53.119Z" name="delete a recurringInteractionBonus_reward that is issued and executed" started-at="2023-02-28T05:08:52.936Z" status="PASS"/>
<test-method duration-ms="455" finished-at="2023-02-28T05:08:53.602Z" name="get a recurringInteractionBonus_fixedPoints" started-at="2023-02-28T05:08:53.145Z" status="PASS"/>
<test-method duration-ms="376" finished-at="2023-02-28T05:08:54.071Z" name="Create a recurringInteractionBonus_fixedPoints" started-at="2023-02-28T05:08:53.695Z" status="PASS"/>
<test-method duration-ms="333" finished-at="2023-02-28T05:08:54.437Z" name="Create a recurringInteractionBonus_fixedPoints if name and externalReference are Null" started-at="2023-02-28T05:08:54.101Z" status="PASS"/>
<test-method duration-ms="170" finished-at="2023-02-28T05:08:54.635Z" name="Create a recurringInteractionBonus_fixedPoints if interval is null" started-at="2023-02-28T05:08:54.465Z" status="PASS"/>
<test-method duration-ms="272" finished-at="2023-02-28T05:08:54.938Z" name="get a newly created recurringInteractionBonus_fixedPoints" started-at="2023-02-28T05:08:54.665Z" status="PASS"/>
<test-method duration-ms="377" finished-at="2023-02-28T05:08:55.409Z" name="updating a recurringInteractionBonus_fixedPoints, and limit cannot be oncePerPromotion when updating a Promotion because oncePerPromotion is only valid when creating a promotion." started-at="2023-02-28T05:08:55.028Z" status="PASS"/>
<test-method duration-ms="179" finished-at="2023-02-28T05:08:55.633Z" name="Update a recurringInteractionBonus_fixedPoints if name and externalReference are Null" started-at="2023-02-28T05:08:55.453Z" status="PASS"/>
<test-method duration-ms="181" finished-at="2023-02-28T05:08:55.844Z" name="Updated a recurringInteractionBonus_fixedPoints if interval is null" started-at="2023-02-28T05:08:55.663Z" status="PASS"/>
<test-method duration-ms="214" finished-at="2023-02-28T05:08:56.091Z" name="delete a newly created recurringInteractionBonus_fixedPoints" started-at="2023-02-28T05:08:55.874Z" status="PASS"/>
<test-method duration-ms="223" finished-at="2023-02-28T05:08:56.343Z" name="get a EnrollmentBonus_Point" started-at="2023-02-28T05:08:56.120Z" status="PASS"/>
<test-method duration-ms="260" finished-at="2023-02-28T05:08:56.630Z" name="get a EnrollmentBonus_Point_2" started-at="2023-02-28T05:08:56.369Z" status="PASS"/>
<test-method duration-ms="442" finished-at="2023-02-28T05:08:57.107Z" name="Create a EnrollmentBonus_Point" started-at="2023-02-28T05:08:56.663Z" status="PASS"/>
<test-method duration-ms="188" finished-at="2023-02-28T05:08:57.330Z" name="Create a EnrollmentBonus_Point if name and points are Null" started-at="2023-02-28T05:08:57.140Z" status="PASS"/>
<test-method duration-ms="227" finished-at="2023-02-28T05:08:57.591Z" name="get a newly created EnrollmentBonus_Point" started-at="2023-02-28T05:08:57.361Z" status="PASS"/>
<test-method duration-ms="267" finished-at="2023-02-28T05:08:57.885Z" name="updating a EnrollmentBonus_Point" started-at="2023-02-28T05:08:57.617Z" status="PASS"/>
<test-method duration-ms="173" finished-at="2023-02-28T05:08:58.092Z" name="Update a EnrollmentBonus_Point if name and points are Null" started-at="2023-02-28T05:08:57.919Z" status="PASS"/>
<test-method duration-ms="236" finished-at="2023-02-28T05:08:58.361Z" name="delete a newly created EnrollmentBonus_Point" started-at="2023-02-28T05:08:58.125Z" status="PASS"/>
<test-method duration-ms="224" finished-at="2023-02-28T05:08:58.615Z" name="delete a EnrollmentBonus_Point that is issued and executed" started-at="2023-02-28T05:08:58.391Z" status="PASS"/>
<test-method duration-ms="212" finished-at="2023-02-28T05:08:58.882Z" name="get a EnrollmentBonus_reward" started-at="2023-02-28T05:08:58.669Z" status="PASS"/>
<test-method duration-ms="383" finished-at="2023-02-28T05:08:59.307Z" name="Create a EnrollmentBonus_reward" started-at="2023-02-28T05:08:58.924Z" status="PASS"/>
<test-method duration-ms="173" finished-at="2023-02-28T05:08:59.513Z" name="Create a EnrollmentBonus_reward if name and rewards are Null" started-at="2023-02-28T05:08:59.340Z" status="PASS"/>
<test-method duration-ms="275" finished-at="2023-02-28T05:08:59.821Z" name="get a newly created EnrollmentBonus_reward" started-at="2023-02-28T05:08:59.542Z" status="PASS"/>
<test-method duration-ms="277" finished-at="2023-02-28T05:09:00.129Z" name="updating a EnrollmentBonus_reward" started-at="2023-02-28T05:08:59.849Z" status="PASS"/>
<test-method duration-ms="163" finished-at="2023-02-28T05:09:00.319Z" name="Update a EnrollmentBonus_reward if name and rewards are Null" started-at="2023-02-28T05:09:00.156Z" status="PASS"/>
<test-method duration-ms="246" finished-at="2023-02-28T05:09:00.596Z" name="delete a newly created EnrollmentBonus_reward" started-at="2023-02-28T05:09:00.349Z" status="PASS"/>
<test-method duration-ms="11672" finished-at="2023-02-28T05:09:12.298Z" name="get a interactionBonus_fixedPoints" started-at="2023-02-28T05:09:00.621Z" status="PASS"/>
<test-method duration-ms="670" finished-at="2023-02-28T05:09:12.999Z" name="Create a interactionBonus_fixedPoints" started-at="2023-02-28T05:09:12.328Z" status="PASS"/>
<test-method duration-ms="195" finished-at="2023-02-28T05:09:13.233Z" name="Create a interactionBonus_fixedPoints if name, interactionType, transactionType and fixedPoints are null" started-at="2023-02-28T05:09:13.036Z" status="PASS"/>
<test-method duration-ms="4355" finished-at="2023-02-28T05:09:17.637Z" name="get a newly created interactionBonus_fixedPoints" started-at="2023-02-28T05:09:13.280Z" status="PASS"/>
<test-method duration-ms="416" finished-at="2023-02-28T05:09:18.083Z" name="updating a interactionBonus_fixedPoints" started-at="2023-02-28T05:09:17.666Z" status="PASS"/>
<test-method duration-ms="183" finished-at="2023-02-28T05:09:18.302Z" name="Update a interactionBonus_fixedPoints if name is Null" started-at="2023-02-28T05:09:18.118Z" status="PASS"/>
<test-method duration-ms="177" finished-at="2023-02-28T05:09:18.509Z" name="Updated a interactionBonus_fixedPoints if fixedPoints is null" started-at="2023-02-28T05:09:18.332Z" status="PASS"/>
<test-method duration-ms="443" finished-at="2023-02-28T05:09:18.990Z" name="delete a newly created interactionBonus_fixedPoints" started-at="2023-02-28T05:09:18.547Z" status="PASS"/>
<test-method duration-ms="228" finished-at="2023-02-28T05:09:19.655Z" name="delete a interactionBonus_fixedPoints that is issued and executed" started-at="2023-02-28T05:09:19.426Z" status="PASS"/>
<test-method duration-ms="415" finished-at="2023-02-28T05:09:20.128Z" name="get a IBP_reward" started-at="2023-02-28T05:09:19.713Z" status="PASS"/>
<test-method duration-ms="232" finished-at="2023-02-28T05:09:20.390Z" name="get a IBP_reward_2" started-at="2023-02-28T05:09:20.157Z" status="PASS"/>
<test-method duration-ms="352" finished-at="2023-02-28T05:09:20.785Z" name="Create a IBP_reward" started-at="2023-02-28T05:09:20.433Z" status="PASS"/>
<test-method duration-ms="176" finished-at="2023-02-28T05:09:20.996Z" name="Create a IBP_reward if name, interactionType and rewardType are null" started-at="2023-02-28T05:09:20.818Z" status="PASS"/>
<test-method duration-ms="378" finished-at="2023-02-28T05:09:21.409Z" name="get a newly created IBP_reward" started-at="2023-02-28T05:09:21.031Z" status="PASS"/>
<test-method duration-ms="349" finished-at="2023-02-28T05:09:21.794Z" name="updating a IBP_reward" started-at="2023-02-28T05:09:21.443Z" status="PASS"/>
<test-method duration-ms="188" finished-at="2023-02-28T05:09:22.016Z" name="Update a IBP_reward if name is Null" started-at="2023-02-28T05:09:21.826Z" status="PASS"/>
<test-method duration-ms="173" finished-at="2023-02-28T05:09:22.221Z" name="Updated a IBP_reward if rewardType is null" started-at="2023-02-28T05:09:22.047Z" status="PASS"/>
<test-method duration-ms="229" finished-at="2023-02-28T05:09:22.483Z" name="delete a newly created IBP_reward" started-at="2023-02-28T05:09:22.251Z" status="PASS"/>
<test-method duration-ms="202" finished-at="2023-02-28T05:09:22.714Z" name="delete a IBP_reward that is issued and executed" started-at="2023-02-28T05:09:22.510Z" status="PASS"/>
<test-method duration-ms="449" finished-at="2023-02-28T05:09:23.199Z" name="Retrieve a list of promotions" started-at="2023-02-28T05:09:22.748Z" status="PASS"/>
<test-method duration-ms="759" finished-at="2023-02-28T05:09:23.984Z" name="get a TBP" started-at="2023-02-28T05:09:23.223Z" status="PASS"/>
<test-method duration-ms="651" finished-at="2023-02-28T05:09:24.701Z" name="Create a TBP with bonusType = reward" started-at="2023-02-28T05:09:24.049Z" status="PASS"/>
<test-method duration-ms="344" finished-at="2023-02-28T05:09:25.079Z" name="Create a TBP if bonusType = rewards then values of name, threshold and internalRewardsId are Null" started-at="2023-02-28T05:09:24.734Z" status="PASS"/>
<test-method duration-ms="382" finished-at="2023-02-28T05:09:25.500Z" name="get a newly created TBP with bonusType = rewards" started-at="2023-02-28T05:09:25.115Z" status="PASS"/>
<test-method duration-ms="396" finished-at="2023-02-28T05:09:25.956Z" name="updating a TBP with bonusType = rewards" started-at="2023-02-28T05:09:25.557Z" status="PASS"/>
<test-method duration-ms="186" finished-at="2023-02-28T05:09:26.190Z" name="Update a TBP with bonusType = rewards if name, threshold and internalRewardsId are Null" started-at="2023-02-28T05:09:26Z" status="PASS"/>
<test-method duration-ms="260" finished-at="2023-02-28T05:09:26.486Z" name="delete a newly created TBP with bonusType = rewards" started-at="2023-02-28T05:09:26.225Z" status="PASS"/>
<test-method duration-ms="353" finished-at="2023-02-28T05:09:26.907Z" name="Create a TBP with bonusType = fixedPoints" started-at="2023-02-28T05:09:26.550Z" status="PASS"/>
<test-method duration-ms="187" finished-at="2023-02-28T05:09:27.129Z" name="Create a TBP if bonusType = fixedPoints then values of name, threshold and fixedPoints are Null" started-at="2023-02-28T05:09:26.941Z" status="PASS"/>
<test-method duration-ms="758" finished-at="2023-02-28T05:09:27.924Z" name="get a newly created TBP with bonusType = fixedPoints" started-at="2023-02-28T05:09:27.164Z" status="PASS"/>
<test-method duration-ms="515" finished-at="2023-02-28T05:09:28.499Z" name="updating a TBP with bonusType = fixedPoints" started-at="2023-02-28T05:09:27.981Z" status="PASS"/>
<test-method duration-ms="182" finished-at="2023-02-28T05:09:28.739Z" name="Update a TBP with bonusType = fixedPoints if name, threshold and fixedPoints are Null" started-at="2023-02-28T05:09:28.555Z" status="PASS"/>
<test-method duration-ms="212" finished-at="2023-02-28T05:09:28.990Z" name="delete a newly created TBP with bonusType = fixedPoints" started-at="2023-02-28T05:09:28.775Z" status="PASS"/>
<test-method duration-ms="384" finished-at="2023-02-28T05:09:29.589Z" name="Create a TBP with bonusType = percentagePoints" started-at="2023-02-28T05:09:29.203Z" status="PASS"/>
<test-method duration-ms="185" finished-at="2023-02-28T05:09:29.813Z" name="Create a TBP if bonusType = percentagePoints then values of name, threshold, percentageOfPoints, lowerLimit and upperLimit are Null" started-at="2023-02-28T05:09:29.626Z" status="PASS"/>
<test-method duration-ms="400" finished-at="2023-02-28T05:09:30.252Z" name="get a newly created TBP with bonusType = percentagePoints" started-at="2023-02-28T05:09:29.850Z" status="PASS"/>
<test-method duration-ms="440" finished-at="2023-02-28T05:09:30.890Z" name="updating a TBP with bonusType = percentagePoints" started-at="2023-02-28T05:09:30.449Z" status="PASS"/>
<test-method duration-ms="174" finished-at="2023-02-28T05:09:31.114Z" name="Update a TBP with bonusType = percentagePoints if name, threshold, fixedPoints, percentageOfPoints, pointsRounding, lowerLimit and upperLimit are Null" started-at="2023-02-28T05:09:30.939Z" status="PASS"/>
<test-method duration-ms="216" finished-at="2023-02-28T05:09:31.364Z" name="delete a newly created TBP with bonusType = percentagePoints" started-at="2023-02-28T05:09:31.147Z" status="PASS"/>
<test-method duration-ms="668" finished-at="2023-02-28T05:09:32.080Z" name="get a TPBP_FP" started-at="2023-02-28T05:09:31.410Z" status="PASS"/>
<test-method duration-ms="263" finished-at="2023-02-28T05:09:32.380Z" name="get a TPBP_FP_2" started-at="2023-02-28T05:09:32.116Z" status="PASS"/>
<test-method duration-ms="820" finished-at="2023-02-28T05:09:33.245Z" name="Create a TPBP_FP" started-at="2023-02-28T05:09:32.423Z" status="PASS"/>
<test-method duration-ms="168" finished-at="2023-02-28T05:09:33.452Z" name="Create a TPBP_FP if name has null value" started-at="2023-02-28T05:09:33.283Z" status="PASS"/>
<test-method duration-ms="276" finished-at="2023-02-28T05:09:33.759Z" name="Create a TPBP_FP if fixedPoints has null value" started-at="2023-02-28T05:09:33.483Z" status="PASS"/>
<test-method duration-ms="536" finished-at="2023-02-28T05:09:34.345Z" name="get a newly created TPBP_FP" started-at="2023-02-28T05:09:33.809Z" status="PASS"/>
<test-method duration-ms="483" finished-at="2023-02-28T05:09:34.864Z" name="updating a TPBP_FP" started-at="2023-02-28T05:09:34.380Z" status="PASS"/>
<test-method duration-ms="188" finished-at="2023-02-28T05:09:35.114Z" name="Update a TPBP_FP if name has null value" started-at="2023-02-28T05:09:34.925Z" status="PASS"/>
<test-method duration-ms="176" finished-at="2023-02-28T05:09:35.323Z" name="Updated a TPBP_FP if fixedPoints has null value" started-at="2023-02-28T05:09:35.146Z" status="PASS"/>
<test-method duration-ms="450" finished-at="2023-02-28T05:09:35.800Z" name="delete a newly created TPBP_FP" started-at="2023-02-28T05:09:35.350Z" status="PASS"/>
<test-method duration-ms="226" finished-at="2023-02-28T05:09:36.058Z" name="delete a TPBP_FP that is issued and executed" started-at="2023-02-28T05:09:35.830Z" status="PASS"/>
<test-method duration-ms="444" finished-at="2023-02-28T05:09:36.551Z" name="get a TPBP_PP" started-at="2023-02-28T05:09:36.106Z" status="PASS"/>
<test-method duration-ms="276" finished-at="2023-02-28T05:09:36.923Z" name="get a TPBP_PP_2" started-at="2023-02-28T05:09:36.643Z" status="PASS"/>
<test-method duration-ms="381" finished-at="2023-02-28T05:09:37.356Z" name="Create a TPBP_PP" started-at="2023-02-28T05:09:36.971Z" status="PASS"/>
<test-method duration-ms="166" finished-at="2023-02-28T05:09:37.558Z" name="Create a TPBP_PP if name has null value" started-at="2023-02-28T05:09:37.388Z" status="PASS"/>
<test-method duration-ms="168" finished-at="2023-02-28T05:09:37.756Z" name="Create a TPBP_PP if percentageOfPoints has null value" started-at="2023-02-28T05:09:37.586Z" status="PASS"/>
<test-method duration-ms="470" finished-at="2023-02-28T05:09:38.260Z" name="get a newly created TPBP_PP" started-at="2023-02-28T05:09:37.787Z" status="PASS"/>
<test-method duration-ms="441" finished-at="2023-02-28T05:09:38.756Z" name="updating a TPBP_PP" started-at="2023-02-28T05:09:38.313Z" status="PASS"/>
<test-method duration-ms="173" finished-at="2023-02-28T05:09:38.969Z" name="Update a TPBP_PP if name has null value" started-at="2023-02-28T05:09:38.792Z" status="PASS"/>
<test-method duration-ms="166" finished-at="2023-02-28T05:09:39.165Z" name="Updated a TPBP_PP if percentageOfPoints has null value" started-at="2023-02-28T05:09:38.995Z" status="PASS"/>
<test-method duration-ms="404" finished-at="2023-02-28T05:09:39.616Z" name="delete a newly created TPBP_PP" started-at="2023-02-28T05:09:39.210Z" status="PASS"/>
<test-method duration-ms="226" finished-at="2023-02-28T05:09:39.896Z" name="delete a TPBP_PP that is issued and executed" started-at="2023-02-28T05:09:39.670Z" status="PASS"/>
<test-method duration-ms="766" finished-at="2023-02-28T05:09:40.698Z" name="get a TPQBP_PPT" started-at="2023-02-28T05:09:39.931Z" status="PASS"/>
<test-method duration-ms="875" finished-at="2023-02-28T05:09:41.657Z" name="Create a TPQBP_PPT" started-at="2023-02-28T05:09:40.781Z" status="PASS"/>
<test-method duration-ms="188" finished-at="2023-02-28T05:09:41.885Z" name="Create a TPQBP_PPT if name has null value" started-at="2023-02-28T05:09:41.696Z" status="PASS"/>
<test-method duration-ms="193" finished-at="2023-02-28T05:09:42.107Z" name="Create a TPQBP_PPT if pointsPercentage and productQuantity have null values" started-at="2023-02-28T05:09:41.911Z" status="PASS"/>
<test-method duration-ms="488" finished-at="2023-02-28T05:09:42.626Z" name="get a newly created TPQBP_PPT" started-at="2023-02-28T05:09:42.135Z" status="PASS"/>
<test-method duration-ms="822" finished-at="2023-02-28T05:09:43.527Z" name="updating a TPQBP_PPT, limit cannot be rewardsIssued as promotion is pointsPercentageTiered, and limit cannot be oncePerPromotion when updating a Promotion because oncePerPromotion is only valid when creating a promotion." started-at="2023-02-28T05:09:42.702Z" status="PASS"/>
<test-method duration-ms="451" finished-at="2023-02-28T05:09:44.059Z" name="delete a newly created TPQBP_PPT" started-at="2023-02-28T05:09:43.604Z" status="PASS"/>
<test-method duration-ms="186" finished-at="2023-02-28T05:09:44.306Z" name="delete a TPQBP_PPT that is issued and executed" started-at="2023-02-28T05:09:44.118Z" status="PASS"/>
<test-method duration-ms="431" finished-at="2023-02-28T05:09:44.782Z" name="get a TPQBP_PT" started-at="2023-02-28T05:09:44.350Z" status="PASS"/>
<test-method duration-ms="483" finished-at="2023-02-28T05:09:45.353Z" name="Create a TPQBP_PT" started-at="2023-02-28T05:09:44.868Z" status="PASS"/>
<test-method duration-ms="408" finished-at="2023-02-28T05:09:45.800Z" name="get a newly created TPQBP_PT" started-at="2023-02-28T05:09:45.388Z" status="PASS"/>
<test-method duration-ms="512" finished-at="2023-02-28T05:09:46.371Z" name="updating a TPQBP_PT, limit cannot be rewardsIssued as promotion is PointsThreshold, and limit cannot be oncePerPromotion when updating a Promotion because oncePerPromotion is only valid when creating a promotion." started-at="2023-02-28T05:09:45.858Z" status="PASS"/>
<test-method duration-ms="279" finished-at="2023-02-28T05:09:46.692Z" name="delete a newly created TPQBP_PT" started-at="2023-02-28T05:09:46.411Z" status="PASS"/>
<test-method duration-ms="200" finished-at="2023-02-28T05:09:46.925Z" name="delete a TPQBP_PT that is issued and executed" started-at="2023-02-28T05:09:46.723Z" status="PASS"/>
<test-method duration-ms="464" finished-at="2023-02-28T05:09:47.428Z" name="get a TPQBP_PTi" started-at="2023-02-28T05:09:46.964Z" status="PASS"/>
<test-method duration-ms="499" finished-at="2023-02-28T05:09:47.982Z" name="Create a TPQBP_PTi" started-at="2023-02-28T05:09:47.480Z" status="PASS"/>
<test-method duration-ms="430" finished-at="2023-02-28T05:09:48.451Z" name="get a newly created TPQBP_PTi" started-at="2023-02-28T05:09:48.018Z" status="PASS"/>
<test-method duration-ms="437" finished-at="2023-02-28T05:09:48.923Z" name="updating a TPQBP_PTi, limit cannot be rewardsIssued as promotion is PointsTiered, and limit cannot be oncePerPromotion when updating a Promotion because oncePerPromotion is only valid when creating a promotion." started-at="2023-02-28T05:09:48.485Z" status="PASS"/>
<test-method duration-ms="177" finished-at="2023-02-28T05:09:49.131Z" name="Update a TPQBP_PTi if name and externalReference are Null" started-at="2023-02-28T05:09:48.954Z" status="PASS"/>
<test-method duration-ms="172" finished-at="2023-02-28T05:09:49.341Z" name="Updated a TPQBP_PTi if point and quantity are Null" started-at="2023-02-28T05:09:49.166Z" status="PASS"/>
<test-method duration-ms="228" finished-at="2023-02-28T05:09:49.604Z" name="delete a newly created TPQBP_PTi" started-at="2023-02-28T05:09:49.373Z" status="PASS"/>
<test-method duration-ms="207" finished-at="2023-02-28T05:09:49.841Z" name="delete a TPQBP_PTi that is issued and executed" started-at="2023-02-28T05:09:49.633Z" status="PASS"/>
<test-method duration-ms="447" finished-at="2023-02-28T05:09:50.321Z" name="get a TPQBP_rewardThreshold" started-at="2023-02-28T05:09:49.873Z" status="PASS"/>
<test-method duration-ms="557" finished-at="2023-02-28T05:09:50.935Z" name="Create a TPQBP_rewardThreshold" started-at="2023-02-28T05:09:50.376Z" status="PASS"/>
<test-method duration-ms="187" finished-at="2023-02-28T05:09:51.167Z" name="Create a TPQBP_rewardThreshold if name and externalReference are Null" started-at="2023-02-28T05:09:50.978Z" status="PASS"/>
<test-method duration-ms="174" finished-at="2023-02-28T05:09:51.383Z" name="Create a TPQBP_rewardThreshold if quantityThreshold1 and quantityThreshold2 are null" started-at="2023-02-28T05:09:51.208Z" status="PASS"/>
<test-method duration-ms="429" finished-at="2023-02-28T05:09:51.848Z" name="get a newly created TPQBP_rewardThreshold" started-at="2023-02-28T05:09:51.417Z" status="PASS"/>
<test-method duration-ms="511" finished-at="2023-02-28T05:09:52.443Z" name="updating a TPQBP_rewardThreshold, and limit cannot be oncePerPromotion when updating a Promotion because oncePerPromotion is only valid when creating a promotion." started-at="2023-02-28T05:09:51.931Z" status="PASS"/>
<test-method duration-ms="269" finished-at="2023-02-28T05:09:52.752Z" name="delete a newly created TPQBP_rewardThreshold" started-at="2023-02-28T05:09:52.481Z" status="PASS"/>
<test-method duration-ms="425" finished-at="2023-02-28T05:09:53.232Z" name="delete a TPQBP_rewardThreshold that is issued and executed" started-at="2023-02-28T05:09:52.804Z" status="PASS"/>
<test-method duration-ms="442" finished-at="2023-02-28T05:09:53.711Z" name="get a TPQBP_RT" started-at="2023-02-28T05:09:53.267Z" status="PASS"/>
<test-method duration-ms="516" finished-at="2023-02-28T05:09:54.292Z" name="Create a TPQBP_RT" started-at="2023-02-28T05:09:53.775Z" status="PASS"/>
<test-method duration-ms="205" finished-at="2023-02-28T05:09:54.550Z" name="Create a TPQBP_RT if name and externalReference are Null" started-at="2023-02-28T05:09:54.341Z" status="PASS"/>
<test-method duration-ms="170" finished-at="2023-02-28T05:09:54.802Z" name="Create a TPQBP_RT if quantity is null" started-at="2023-02-28T05:09:54.628Z" status="PASS"/>
<test-method duration-ms="677" finished-at="2023-02-28T05:09:55.512Z" name="get a newly created TPQBP_RT" started-at="2023-02-28T05:09:54.834Z" status="PASS"/>
<test-method duration-ms="560" finished-at="2023-02-28T05:09:56.133Z" name="updating a TPQBP_RTand, and limit cannot be oncePerPromotion when updating a Promotion because oncePerPromotion is only valid when creating a promotion." started-at="2023-02-28T05:09:55.570Z" status="PASS"/>
<test-method duration-ms="279" finished-at="2023-02-28T05:09:56.538Z" name="delete a newly created TPQBP_RT" started-at="2023-02-28T05:09:56.253Z" status="PASS"/>
<test-method duration-ms="174" finished-at="2023-02-28T05:09:56.740Z" name="delete a TPQBP_RT that is issued and executed" started-at="2023-02-28T05:09:56.565Z" status="PASS"/>
</class>
</test>
</suite>
</testng-results>
